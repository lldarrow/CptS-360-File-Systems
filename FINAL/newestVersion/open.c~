/*****************************************
CptS 360 Final Project

open

Programmers:
David Hoekman 11423672
Luke Darrow 11349190

Last Modified: 11/23/15
*****************************************/

//opens file
int open_file(char path[124])
{
	int i, ino, fd = 0, perm = 0, mask = 0, mode = -1, offset = 0;
	MINODE *mip;
	INODE* ip;
	OFT* of = NULL;

	char buf[1024];

	printf("Opening file!\n");
	//check for open mode
	if (!strcmp(third, ""))
	{
		printf("No open mode specified!\n");
		return;
	}

	//set open mode to correct corresponding int
	if (!strcmp(third, "0"))//RD
		mode = 0;
	else if (!strcmp(third, "1"))//WR
		mode = 1;
	else if (!strcmp(third, "2"))//RW
		mode = 2;
	else if (!strcmp(third, "3"))//APP
		mode = 3;
	else
	{
		printf("Invalid mode!\n");//FAIL
		return;
	}

	//cheks the path adn gets the ino for the pathname
	//checks if we're going off of root or cwd
	if (path[0] == '/')
		ino = getino(root, path);
	else  //get the ino
		ino = getino(running->cwd, path);

	printf("%d\n", ino);
	//make sure it exists!
	if (ino == 0)
	{
		printf("ERROR: No such file!\n");
		return;
	}

	//get the minode
	mip = iget(dev, ino);
	ip = &mip->INODE;

	//make sure it's a file
	if (!S_ISREG(ip->i_mode))
	{
		printf("ERROR: Not a file!\n");
		iput(mip);
		return;
	}


	//checking permissions
	if (running->uid == ip->i_uid)
	{
		//correct user ownership
		perm = 6;
	}
	else if (running->gid == ip->i_gid)
	{
		//correct group ownership
		perm = 3;
	}

	//set mask based on permission
	mask = mode & (7 << perm);
	iput(mip);

	//checks the created mask to the permissions of the file
	//this ensures that the running process has the permissions to
	//read, write, or execute the file
	//returns if the permissions are not met and therefore won't open the file
	//7 means you have all of them since it's octal
	switch(mode)
	{
		//4 = 100
		case 1:
			if (((4 << perm) & mask) == 0 && running->uid != SUPER_USER)
			{
				printf("PERMISSION DENY!\n");
				iput(mip);
				return;
			}
			break;
		case 2:
		//2 = 010
			if (((2 << perm) & mask) == 0 && running->uid != SUPER_USER)
			{
				printf("PERMISSION DENY!\n");
				iput(mip);
				return;
			}
			break;
		case 3:
		//6 = 110
			if (((6 << perm) & mask) == 0 && running->uid != SUPER_USER)
			{
				printf("PERMISSION DENY!\n");
				iput(mip);
				return;
			}
			break;
		case 4:
		//2 = 010
		if (((2 << perm) & mask) == 0 && running->uid != SUPER_USER)
		{
			printf("PERMISSION DENY!\n");
			iput(mip);
			return;
		}
		offset = ip->i_size;
		break;
	}

	//check the fd's in running to ensure we have an open fd
	//if we don't have any useable fd's returns and does not open the file
	for (fd = 0; fd < NFD; fd++)
	{
		if (running->fd[fd] == NULL)
			break;

		if (fd == NFD -1)
		{
			printf("Out of processes!\n");
			iput(mip);
			return;
		}
	}

	//runs through the open file table
	for (i = 0; i < NOFT; i++)
	{
		of = &OpenFileTable[i];

		//Checking to make sure it is not open already
		//If it is open, making sure it is open in read mode
		//Multiple reads is OK
		if(mode != 0 && of->refCount > 0 && of->inodeptr == mip && of->mode != 0)
		{
			printf("Cannot open, file is being used!\n");
			iput(mip);
			return;
		}

		//set some variables and break since we have our fd and it's not busy
		if (of->refCount == 0)
		{
			of->mode = mode;
			of->offset = offset;
			of->inodeptr = mip;
			of->refCount++;

			running->fd[fd] = of;

			break;
		}

		//out of range, print error
		if (i == NOFT - 1)
		{
			printf("No more room!\n");
			iput(mip);
			return;
		}
	}

	ip->i_atime = time(0L);
	mip->dirty = 1;

	return fd;
}
